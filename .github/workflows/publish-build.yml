name: Workflow-Task-seed
on:
  push:
    branches: [ "V3" ]
  pull_request:
    branches: [ "V3" ]

permissions:
  actions: read # for detecting the Github Actions environment.
  id-token: write # for creating OIDC tokens for signing.
  packages: write # for uploading attestations.
  security-events: write # Required for uploading code scanning
  attestations: write
  contents: read

jobs:
  build-publish-docker:
    runs-on: ubuntu-latest
    env:
      DOCKER_REPO: assignmentv3-docker
      IMAGE_NAME: assignment
      NPM_VIRTUAL_REPO: matanassignment-npm
      DOCKER_BUILD_SUMMARY: false
      DOCKER_BUILD_RECORD_UPLOAD: false
      JFROG_CLI_LOG_LEVEL: DEBUG

    steps:
    - name: Checkout the repository
      uses: actions/checkout@v4

    - name: Setup JFrog CLI
      uses: jfrog/setup-jfrog-cli@v4
      id: setup-cli
      env:
        JF_URL: https://${{ vars.JF_URL }}/
      with:
        oidc-provider-name: jfrog-github-oidc # Establish an OIDC connection to allow trust between the workflow and your JFrog instance

    # Configure the JFrog CLI server with the name "matanassignment"
    - name: Add JFrog server configuration
      run: |
        jf c add matanassignment \
          --url=https://${{ vars.JF_URL }} \
          --access-token=${{ secrets.JF_ACCESS_TOKEN }} \
          --interactive=false

    # Set CLI Config for npm resolver and deployer
    - name: Set CLI Config
      run: jf npm-config --repo-resolve=${{ env.NPM_VIRTUAL_REPO }} --repo-deploy=${{ env.NPM_VIRTUAL_REPO }}

    - name: build webapp
      run: jf npm install

    # Authenticate Docker using native Docker CLI
    - name: Authenticate Docker
      run: |
        echo "${{ secrets.JF_ACCESS_TOKEN }}" | docker login ${{ vars.JF_URL }} \
          -u ${{ secrets.JF_USER }} --password-stdin

    - name: Build the Docker image
      uses: docker/build-push-action@v6
      id: build
      with:
        push: true
        context: .
        platforms: linux/amd64
        tags: ${{ vars.JF_URL }}/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}:V3
        provenance: false

    - name: add docker package to build
      run: |
        echo "${{ vars.JF_URL }}/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}:V3@${{ steps.build.outputs.digest }}" > metadata.json
        jf rt build-docker-create ${{ env.DOCKER_REPO }} --image-file metadata.json

    - name: publish build info
      run: |
        jf rt build-collect-env
        jf rt build-add-git
        jf rt build-publish
